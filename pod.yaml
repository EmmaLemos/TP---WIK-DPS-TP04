# apiVersion: v1
# kind: Pod
# metadata:
#   name: nginx
# spec:
#   containers:
#   - name: nginx
#     image: nginx:1.14.2
#     ports:
#     - containerPort: 80
    
---
# apiVersion: apps/v1
# kind: ReplicaSet
# metadata:
#   name: nginx
#   labels:
#     app: guestbook
#     tier: frontend
# spec:
#   # modify replicas according to your case
#   replicas: 20
#   selector:
#     matchLabels:
#       tier: frontend
#   template: # ce qu'il doit déployé
#     metadata:
#       labels:
#         tier: frontend
#     spec:
#       containers:
#       - name: nginx
#         image: nginx:1.14.2
#         ports:
#         - containerPort: 8080

--- 
apiVersion: v1
kind: Service
metadata:
  name: echo-service
spec:
  selector:
    tier: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  strategy: 
    type: RollingUpdate
    rollingUpdate: 
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: echo
        image: nginx:1.14.2
        ports:
        - containerPort: 8080

--- 
#Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echo-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: production.amazon.fr
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: echo-service
            port:
              number: 80